#include <bits/stdc++.h>  //header file that includes all the standard libraries
using namespace std; //IpOp

#define EMPTY 0 //creating a macro used as constants throughout the code

#define N 9 /* Considering a 9x9 matrix. 
Can be generalised for any nxn matrix.
Can set max>9 and use switch case to select any n */

// i=row, j=column

bool findemptylocation(int sud[N][N], int &i, int &j); // finds empty unassigned locations from array  

bool okay(int sud[N][N],int i, int j, int key); //checks if key can be placed or not





bool sudoku(int sud[N][N]) //checks if the number 'key' can be placed after checking the corresponding row, column and grid
{
    int i,j;
    if(!findemptylocation(sud,i,j))
    return true;
    
    for(int key=1;key<10;key++)
    {
        if(okay(sud,i,j,key))
        {
            sud[i][j]=key;
            if (sudoku(sud))
                return true; //done
            sud[i][j]=EMPTY; //failed
        }
    }
    return false; //leads to backtracking
    
}


bool findemptylocation(int sud[N][N], int &i, int &j) //finds an empty location in the array
{
    for(i=0;i<N;i++)
        for(j=0;j<N;j++)
            if(sud[N][N] == EMPTY)
                return true;
    return false;    
}


bool RowCheck(int sud[N][N],int i, int key) //checks if the key is present in the corresponding row
{
    for(int j=0;j<N;j++)
        if(sud[i][j] == key)
            return true;
    return false;
}

bool ColCheck(int sud[N][N],int j, int key) //checks if the key is present in the corresponding column
{
    for(int i=0;i<N;i++)
        if(sud[i][j] == key)
            return true;
    return false;
}


bool GridCheck(int sud[N][N],int k, int l, int key) //checks if the key is present in the corresponding 3x3 grid
{
    for(int i=0;i<N;i++)
        for(int j=0;j<N;j++)
            if(sud[i+k][j+l] == key)
                return true;
    return false;
}


bool okay(int sud[N][N],int i, int j, int key) //checks if key isn't there corresponding row, column and grid
{
    return !RowCheck(sud,i,key) && !ColCheck(sud,j,key) && !GridCheck(sud,i-i%3, j-j%3,key) && sud[i][j] == EMPTY;
}





void print(int sud[N][N]) //to print the final sudoku
{
    for(int i=0;i<N;i++)
    {
    for(int j=0;j<N;j++)
            cout<<sud[i][j]<<" ";
        cout<<endl;
    }
}

int main()
{
    int sud[N][N] = 
    {{5,1,7,6,0,0,0,3,4},
    {2,8,9,0,0,4,0,0,0},
    {3,4,6,2,0,5,0,9,0},
    {6,0,2,0,0,0,0,1,0},
    {0,3,8,0,0,6,0,4,7},
    {0,0,0,0,0,0,0,0,0},
    {0,9,0,0,0,0,0,7,8},
    {7,0,3,4,0,0,5,6,0},
    {0,0,0,0,0,0,0,0,0}};
    // 0 implies that there is no number assigned to that particular cell
    if(sudoku(sud)==true)
        print(sud);
    else
        cout<<"Not possible";
    
    return 0;
}





